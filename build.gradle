import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.HttpMultipartMode
import org.apache.http.entity.mime.content.FileBody
import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.*
import static groovyx.net.http.ContentType.*

buildscript {
   repositories {
     mavenCentral()
   }
   dependencies {
      classpath 'org.apache.httpcomponents:httpmime:4.5.2'
      classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
   }
}

// set the properties accordingly
project.ext {
    baseDir = projectDir
    uiDir = "${baseDir}/ui"
    libDir = "${baseDir}/lib"
    configDir = "${baseDir}/metadata.xml"
    zipDir = "${baseDir}/zip"
    packageVendor = "ThingWorx Customer Service"
    thingworxServerRoot = "http://localhost:8070"
    thingworxUser = "Administrator"
    thingworxPass = "admin"
}

task increaseVersionNumber() {
  doLast {
    def file = "${baseDir}/metadata.xml"
    def parser = new groovy.util.XmlParser(false,true);
    def xml = parser.parse(file)

    def currentVersion = xml.ExtensionPackages.ExtensionPackage.@packageVersion[0];

    def versionComponents = currentVersion.split('\\.');

    def minorVersion = ++Integer.parseInt(versionComponents[versionComponents.length - 1]);

    versionComponents[versionComponents.length - 1] = String.valueOf(minorVersion);

    xml.ExtensionPackages.ExtensionPackage.@packageVersion = String.join('.', versionComponents);
  //  xml.ExtensionPackages.ExtensionPackage.get(0).attributes().put('packageVersion', String.join(',', versionComponents));

    println 'Updated to version ' + String.join('.', versionComponents)
    println xml.ExtensionPackages.ExtensionPackage.@packageVersion[0];

    PrintWriter pw = new PrintWriter(new File(file))
    pw.write(groovy.xml.XmlUtil.serialize(xml))
    pw.close()

  }
}

task prepPackage(dependsOn: increaseVersionNumber) {
    doLast {
        try {
            delete project.ext.zipDir
        }
        catch (e) {

        }

        // add the configuration
        copy {
            from "${project.ext.configDir}"
            into "${buildDir}/zip/"
        }
        // add the ui files
        copy {
            from uiDir
            into "${buildDir}/zip/ui/"
        }
    }
}

task packageExtension(type: Zip, dependsOn: prepPackage, overwrite: true) {
    archiveName = "${project.name}.zip"
    destinationDir = new File(project.ext.zipDir)
    from "${buildDir}/zip/"
}

task upload(dependsOn: packageExtension) {
  doLast{
    def http = new HTTPBuilder("${thingworxServerRoot}/Thingworx/")
    http.auth.basic thingworxUser, thingworxPass

    def extZip = file("${baseDir}/zip/${project.name}.zip")

    http.request(POST) { req ->
        uri.path = 'ExtensionPackageUploader'
        uri.query = ['purpose': 'import']
        headers."X-XSRF-TOKEN" = "TWX-XSRF-TOKEN-VALUE"
        requestContentType = 'multipart/form-data'
        MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE)
        entity.addPart('file', new FileBody(extZip))
        req.setEntity(entity)
        response.success = {resp ->
            println("Upload successful!")
            System.exit(0)
        }

        response.failure = {resp ->
            println(resp.statusLine)
            throw new StopExecutionException("Thingworx upload failed! See server response above")
            System.exit(0)
        }
    }
  }
}
